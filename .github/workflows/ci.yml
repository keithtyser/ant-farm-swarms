name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  # ────────────────────────────────────────────────────────────────
  # 1)  Python package ➜ lint + tests
  # ────────────────────────────────────────────────────────────────
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # editable install + dev/test deps + build tooling
      - name: Install backend package (+dev deps)
        run: |
          python -m pip install --upgrade pip
          python -m pip install build pytest httpx[async]  # test deps
          # editable install so `antfarm` is importable from repo root
          python -m pip install -e .

      # ensure we can build an sdist / wheel (future‑proof for PyPI)
      - name: Build distribution artifacts
        run: python -m build --sdist --wheel --no-isolation .

      - name: Run tests
        run: pytest -q

  # ────────────────────────────────────────────────────────────────
  # 2)  Front‑end build (Vite + React + TS)
  # ────────────────────────────────────────────────────────────────
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Restore NPM cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install & build
        run: |
          npm ci --ignore-scripts
          npm run build --if-present

  # ────────────────────────────────────────────────────────────────
  # 3)  Docker Compose smoke test
  #     (build images and hit the / health‑check)
  # ────────────────────────────────────────────────────────────────
  compose-smoke:
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx          # faster, multi‑platform builder
        uses: docker/setup-buildx-action@v3

      - name: Build images defined in compose
        run: docker compose -f docker-compose.yml build --progress plain

      - name: Launch minimal stack & ping health endpoint
        run: |
          docker compose -f docker-compose.yml up -d redis web
          # give it a few seconds to start
          for i in {1..10}; do
            if curl -fs http://localhost:8000/ | grep -q '"status":"ant farm running"'; then
              echo "✅  Backend healthy"; exit 0; fi
            sleep 2
          done
          echo "❌  Health‑check failed"; docker compose logs web; exit 1

      - name: Tidy up
        if: always()
        run: docker compose -f docker-compose.yml down -v
